"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os.path
import os
from pathlib import Path
from dotenv import load_dotenv # type: ignore
load_dotenv(override=True)
import dj_database_url # type: ignore



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS').split(" ")
ALLOWED_HOSTS = ['*']



# Application definition

INSTALLED_APPS = [
    'cloudinary_storage',#! cloudinary
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'homepage',
    'appointment',
    'doctors',
    'patients',
    'patients_images',
    'appointment_schedule',
    'django_cleanup.apps.CleanupConfig', #clean updated/deleted files/photos
    'storages', #! django-storages para aws
    'cloudinary' 

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'doctors.middleware.SQLInjectionMiddleware', # para evitar DDoS
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',

        
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     "default": {
#       "ENGINE": "django.db.backends.postgresql",
#       "NAME": "thedoctorsDB",
#       "USER": "admin",
#       "PASSWORD": "password123",
#       "HOST": "127.0.0.1",
#       "PORT": "5432",
#   }
# }

DATABASES = {
    "default": {
        "ENGINE":os.getenv('ENGINE'),
        "NAME": os.getenv('NAME'),
        "USER": os.getenv('USER'),
        "PASSWORD": os.getenv('PASSWORD'),
        "HOST": os.getenv('HOST'),
        "PORT": os.getenv('PORT'),
        "OPTIONS": {
            "sslmode": "require" 
        }
    }
}

DATABASES['default'] = dj_database_url.parse(os.getenv('DATABASE_URL'))

#! atomicidad datos
DATABASES['default']['ATOMIC_REQUESTS'] = True 

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-US'

TIME_ZONE = 'America/Guayaquil'

USE_I18N = True

USE_TZ = True

# Para activar los mensajes
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'

# ajustando fechas 
DATE_INPUT_FORMATS = ('%d-%m-%Y','%Y-%m-%d')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_ROOT = '/static/'
STATIC_URL = '/static/'

# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'static'),
# ]


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
# DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Al autentificarse
LOGIN_REDIRECT_URL = 'dashboard'

LOGIN_URL = 'login'

LOGOUT_REDIRECT_URL = "homepage" 

# Duración de sesiones en segundos
SESSION_COOKIE_AGE = 86400

#! Cloudinary

# CLOUDINARY_STORAGE ={
#     'CLOUD_NAME': os.getenv('CLOUD_NAME'),
#     'API_KEY':os.getenv('API_KEY'),
#     'API_SECRET': os.getenv('API_SECRET'),    
# }

#! Para ejecución en Cloudinary dearchivos estáticos
# STATICFILES_STORAGE = 'cloudinary_storage.storage.StaticHashedCloudinaryStorage'

# STATIC_ROOT = 'staticfiles'


# aws

# STORAGES = {
#     #* Media file management
#     "default" :{
#         'BACKEND':'storages.backends.s3boto3.S3StaticStorage', #! ALMACENAMIENTO AWS S3"
#     },
#     #* css y js
#     "staticfiles":{
#         'BACKEND':'storages.backends.s3boto3.S3StaticStorage', #! ALMACENAMIENTO AWS S3"
        
#     }
# }


'''
django-storages
boto3
crear bucket, generar politica, crear usuario, asigna S3AllPermision, generar 2 claves
'''
# DEFAULT_FILE_STORAGE = "storages.backends.s3.S3Storage"
# STATICFILES_STORAGE = "storages.backends.s3.S3Storage"

# AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')

# AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')

# AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')

# AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com'% AWS_STORAGE_BUCKET_NAME

# AWS_S3_FILE_OVERWRITE = False

# AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME')
